# 第2章 编程之本：变量和函数
> 编程语言之多，一篇写不下。这些语言的共有特性就是**变量** 和 **函数**

## 2.1 变量
Kotlin中申明变量，只允许在变量前申明两种关键字：**val** 和 **var**。

- val， value 的简写，用来声明一个不可变的变量。对应Java中的final变量；
- var， variable的简写，用来声明一个可变的变量。

```kotlin
val a = 10
var b = "12"
```

对变量声明时就赋值的话，依赖Kotlin的类型推导机制，可以不用申明变量类型。但是如果是变量的延迟初始化，类型推导就不行了，需要制定变量类型。

```kotlin
val c: Int = 3
```
Kotlin抛弃了Java中的基本数据类型，采用对象数据类型。在Java中 `int` 是关键字，而在Kotlin中变成了`Int`类，它拥有自己的方法和继承结构。

|Java基本数据类型|Kotlin对象数据类型|数据类型说明|
|:---:|:---:|:---:|
|int   |Int  |整型  |
|long  |Long |长整型|
|short |Short|短整型|
|float |Float|单精度浮点型|
|double|Double|双精度浮点型|
|boolean|Boolean|布尔型|
|char  |Char|字符型|
|byte  |Byte|字节型|

> 为什么要使用`val`这个关键字呢？
> Kotlin之所以这样设计，是为了解决Java中final关键字没有被合理使用的问题。
> 在Java中，除非主动在变量前声明了final关键字，否则这个变量就是可变的。然而变项目变得越来越复杂，参与人员越来越多时，一个可变变量不知道什么时候就会被其他人修改了，而它原本不应该被修改。这样出现问题也不变排查。
> 使用`val`关键字的窍门就是：**永远优先使用val来声明一个变量，当val没法满足要求时再使用var。**这样程序会更健壮！
> 











